{"/home/travis/build/npmtest/node-npmtest-node-sqlserver-unofficial/test.js":"/* istanbul instrument in package npmtest_node_sqlserver_unofficial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sqlserver-unofficial/lib.npmtest_node_sqlserver_unofficial.js":"/* istanbul instrument in package npmtest_node_sqlserver_unofficial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_sqlserver_unofficial = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_sqlserver_unofficial = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sqlserver-unofficial/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-sqlserver-unofficial && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_sqlserver_unofficial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_sqlserver_unofficial\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_sqlserver_unofficial.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_sqlserver_unofficial.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_sqlserver_unofficial.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_sqlserver_unofficial.__dirname + '/lib.npmtest_node_sqlserver_unofficial.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sqlserver-unofficial/node_modules/node-sqlserver-unofficial/lib/sql.js":"//---------------------------------------------------------------------------------------------------------------------------------\r\n// File: sql.js\r\n// Contents: javascript interface to Microsoft Driver for Node.js  for SQL Server\r\n// \r\n// Copyright Microsoft Corporation and contributors\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n//\r\n// You may obtain a copy of the License at:\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//---------------------------------------------------------------------------------------------------------------------------------\r\n\r\nvar sql = require('./sqlserver.native');\r\nvar events = require('events');\r\nvar util = require('util');\r\n\r\nfunction StreamEvents() {\r\n    events.EventEmitter.call(this);\r\n}\r\nutil.inherits(StreamEvents, events.EventEmitter);\r\n\r\nfunction routeStatementError(err, callback, notify) {\r\n\r\n    if (callback) {\r\n        callback(err);\r\n    }\r\n    else if (notify && notify.listeners('error').length > 0) {\r\n        notify.emit('error', err);\r\n    }\r\n    else {\r\n        throw new Error(err);\r\n    }\r\n}\r\n\r\nfunction nextOp( q ) {\r\n\r\n    q.shift();\r\n\r\n    if( q.length != 0 ) {\r\n\r\n        var op = q[0];\r\n\r\n        op.fn.apply( op.fn, op.args );\r\n    }\r\n}\r\n\r\nfunction validateParameters( parameters, funcName ) {\r\n\r\n    for( var p in parameters ) {\r\n\r\n        if( typeof parameters[p].value != parameters[p].type ) {\r\n\r\n            throw new Error( [\"[msnodesql] Invalid \", parameters[p].name, \" passed to function \", funcName, \". Type should be \", parameters[p].type, \".\" ].join('') );\r\n        }\r\n    }\r\n}\r\n\r\nfunction query_internal(ext, query, params, callback) {\r\n\r\n    function onQuery(err, results) {\r\n\r\n        if( callback ) {\r\n            callback(err, results);\r\n        }\r\n    }\r\n\r\n    return ext.query(query, params, onQuery);\r\n}\r\n\r\n\r\nfunction getChunkyArgs(paramsOrCallback, callback) {\r\n\r\n    if(( typeof paramsOrCallback == 'object' && Array.isArray( paramsOrCallback ) == true ) &&\r\n         typeof callback == 'function' ) {\r\n\r\n        return { params: paramsOrCallback, callback: callback };\r\n    }\r\n\r\n    if( paramsOrCallback == null && typeof callback == 'function' ) {\r\n\r\n        return { params: [], callback: callback };\r\n    }\r\n\r\n    if( typeof paramsOrCallback == 'function' && typeof callback == 'undefined' ) {\r\n\r\n        return { params: [], callback: paramsOrCallback };\r\n    }\r\n\r\n    if(( typeof paramsOrCallback == 'object' && Array.isArray( paramsOrCallback ) == true ) &&\r\n         typeof callback == 'undefined' ) {\r\n\r\n        return { params: paramsOrCallback, callback: null };\r\n    }\r\n\r\n    if(( paramsOrCallback == null || typeof paramsOrCallback == 'undefined' ) && typeof callback == 'undefined' ) {\r\n\r\n        return { params: [], callback: null };\r\n    }\r\n\r\n    throw new Error( \"[msnodesql] Invalid parameter(s) passed to function query or queryRaw.\" );\r\n}\r\n\r\nfunction objectify(results) {\r\n\r\n    var names = {};\r\n    var name, idx;\r\n\r\n    for (idx in results.meta) {\r\n        var meta = results.meta[idx];\r\n        name = meta.name;\r\n        if (name !== '' && names[name] === undefined) {\r\n            names[name] = idx;\r\n        }\r\n        else {\r\n            var extra = 0;\r\n            var candidate = 'Column' + idx;\r\n            while (names[candidate] !== undefined) {\r\n                candidate = 'Column' + idx + '_' + extra++;\r\n            }\r\n            names[candidate] = idx;\r\n        }\r\n    }\r\n\r\n    var rows = [];\r\n    for (idx in results.rows) {\r\n        var row = results.rows[idx];\r\n        var value = {};\r\n        for (name in names) {\r\n            value[name] = row[names[name]];\r\n        }\r\n        rows.push(value);\r\n    }\r\n\r\n    return rows;\r\n}\r\n\r\n// TODO: Simplify this to use only events, and then subscribe in Connection.query\r\n// and Connection.queryRaw to build callback results\r\nfunction readall(q, notify, ext, query, params, callback) {\r\n\r\n\r\n    var meta;\r\n    var column;\r\n    var rows = [];\r\n    var rowindex = 0;\r\n\r\n    function onReadColumnMore( err, results ) {\r\n\r\n        if (err) {\r\n            routeStatementError(err, callback, notify);\r\n            nextOp( q );\r\n            return;\r\n        }\r\n\r\n        var data = results.data;\r\n        var more = results.more;\r\n\r\n        notify.emit('column', column, data, more);\r\n\r\n        if (callback) {\r\n            rows[rows.length - 1][column] += data;\r\n        }\r\n\r\n        if (more) {\r\n            ext.readColumn(column, onReadColumnMore);\r\n            return;\r\n        }\r\n\r\n        column++;\r\n        if (column >= meta.length) {\r\n            ext.readRow(onReadRow);\r\n            return;\r\n        }\r\n\r\n        ext.readColumn(column, onReadColumn);\r\n    }\r\n\r\n    function onReadColumn( err, results ) {\r\n\r\n        if (err) {\r\n            routeStatementError(err, callback, notify);\r\n            nextOp(q);\r\n            return;\r\n        }\r\n\r\n        var data = results.data;\r\n        var more = results.more;\r\n\r\n        notify.emit('column', column, data, more);\r\n\r\n        if (callback) {\r\n            rows[rows.length - 1][column] = data;\r\n        }\r\n\r\n        if (more) {\r\n            ext.readColumn(column, onReadColumnMore);\r\n            return;\r\n        }\r\n\r\n        column++;\r\n\r\n        if (column >= meta.length) {\r\n            ext.readRow(onReadRow);\r\n            return;\r\n        }\r\n\r\n        ext.readColumn(column, onReadColumn);\r\n    }\r\n\r\n    function rowsCompleted( results, more ) {\r\n\r\n        if( !more ) {\r\n            notify.emit('done');\r\n        }\r\n\r\n        if (callback) {\r\n            callback( null, results, more );\r\n        }\r\n    }\r\n\r\n    function rowsAffected( moreResults ) {\r\n\r\n        var rowCount = ext.readRowCount();\r\n\r\n        notify.emit('rowcount', rowCount );\r\n\r\n        rowsCompleted( { meta: null, rowcount: rowCount }, moreResults );\r\n    }\r\n\r\n    function onNextResult( err, nextResultSetInfo ) {\r\n\r\n        if( err ) {\r\n\r\n            routeStatementError( err, callback, notify );\r\n            nextOp( q );\r\n            return;\r\n        }\r\n\r\n        // handle the just finished result reading\r\n        if( meta.length == 0 ) {\r\n            // if there was no metadata, then pass the row count (rows affected)\r\n            rowsAffected( !nextResultSetInfo.endOfResults );\r\n        }\r\n        else {\r\n            // otherwise, pass the accumulated results\r\n            rowsCompleted( { meta: meta, rows: rows }, !nextResultSetInfo.endOfResults );\r\n        }\r\n\r\n        // reset for the next resultset\r\n        meta = nextResultSetInfo.meta;\r\n        rows = [];\r\n\r\n        if( nextResultSetInfo.endOfResults ) {\r\n\r\n            // TODO: What about closed connections due to more being false in the callback?  See queryRaw below.\r\n            nextOp( q );\r\n        }\r\n        else {\r\n\r\n            // if this is just a set of rows \r\n            if( meta.length > 0 ) {\r\n                notify.emit( 'meta', meta );\r\n                    \r\n                // kick off reading next set of rows\r\n                ext.readRow( onReadRow );\r\n            }\r\n            else {\r\n\r\n                ext.nextResult( onNextResult );\r\n            }\r\n        }            \r\n    }\r\n\r\n    function onReadRow( err, endOfRows ) {\r\n\r\n        if (err) {\r\n            routeStatementError(err, callback, notify);\r\n            nextOp(q);\r\n            return;\r\n        }\r\n        // if there were rows and we haven't reached the end yet (like EOF)\r\n        else if (meta.length > 0 && !endOfRows) {\r\n\r\n            notify.emit('row', rowindex++);\r\n\r\n            column = 0;\r\n            if (callback) {\r\n                rows[rows.length] = [];\r\n            }\r\n\r\n            ext.readColumn(column, onReadColumn);\r\n        }\r\n        // otherwise, go to the next result set\r\n        else {\r\n\r\n            ext.nextResult( onNextResult );\r\n        }\r\n    }\r\n\r\n    query_internal(ext, query, params, function (err, results) {\r\n\r\n        if (err) {\r\n            routeStatementError(err, callback, notify);\r\n            nextOp(q);\r\n            return;\r\n        }\r\n\r\n        meta = results;\r\n        if (meta.length > 0) {\r\n\r\n            notify.emit('meta', meta);\r\n            ext.readRow( onReadRow );\r\n        }\r\n        else {\r\n\r\n            ext.nextResult( onNextResult )\r\n        }\r\n    });\r\n}\r\n\r\nfunction open(connectionString, callback) {\r\n\r\n    validateParameters( [ { type: 'string', value: connectionString, name: 'connection string' },\r\n                          { type: 'function', value: callback, name: 'callback' }], 'open' );\r\n\r\n    var ext = new sql.Connection();\r\n\r\n    var q = [];\r\n\r\n    function defaultCallback( err ) {\r\n\r\n        if( err ) {\r\n            throw new Error( err );\r\n        }\r\n    }\r\n\r\n    function Connection() {\r\n\r\n        this.close = function (callback) { \r\n\r\n            function onClose( err ) {\r\n\r\n                callback( err );\r\n            }\r\n\r\n            callback = callback || defaultCallback;\r\n\r\n            ext.close( onClose ); \r\n        }\r\n\r\n        this.queryRaw = function (query, paramsOrCallback, callback) {\r\n\r\n            validateParameters( [ { type: 'string', value: query, name: 'query string' }], 'queryRaw' );\r\n\r\n            var notify = new StreamEvents();\r\n\r\n            var chunky = getChunkyArgs(paramsOrCallback, callback);\r\n\r\n            var op = { fn: readall, args: [ q, notify, ext, query, chunky.params, chunky.callback ] }; \r\n            q.push( op );\r\n            \r\n            if( q.length == 1 ) {\r\n\r\n                readall( q, notify, ext, query, chunky.params, chunky.callback );\r\n            }\r\n\r\n            return notify;\r\n        }\r\n\r\n        this.query = function (query, paramsOrCallback, callback) {\r\n\r\n            validateParameters( [ { type: 'string', value: query, name: 'query string' }], 'query' );\r\n\r\n            var chunky = getChunkyArgs(paramsOrCallback, callback);\r\n\r\n            function onQueryRaw( err, results, more ) {\r\n\r\n                if (chunky.callback) {\r\n                    if (err) chunky.callback(err);\r\n                    else chunky.callback(err, objectify(results), more);\r\n                }\r\n            }\r\n\r\n            return this.queryRaw(query, chunky.params, onQueryRaw);\r\n        }\r\n\r\n        this.beginTransaction = function(callback) {\r\n\r\n            function onBeginTxn( err ) {\r\n\r\n                callback( err );\r\n\r\n                nextOp( q );\r\n            }\r\n\r\n            callback = callback || defaultCallback;\r\n            \r\n            var op = { fn: function( callback ) { ext.beginTransaction( callback ) }, args: [ onBeginTxn ] }; \r\n            q.push( op );\r\n\r\n            if( q.length == 1 ) {\r\n\r\n                ext.beginTransaction( onBeginTxn );\r\n            }\r\n        }\r\n\r\n        this.commit = function (callback) {\r\n\r\n            function onCommit( err ) {\r\n\r\n                callback( err );\r\n\r\n                nextOp(q);\r\n            }\r\n\r\n            callback = callback || defaultCallback;\r\n\r\n            var op = { fn: function (callback) { ext.commit(callback); }, args: [onCommit] };\r\n            q.push(op);\r\n\r\n            if (q.length == 1) {\r\n\r\n                ext.commit(onCommit);\r\n            }\r\n        }\r\n\r\n        this.rollback = function(callback) {\r\n\r\n            function onRollback( err ) {\r\n\r\n                callback( err );\r\n\r\n                nextOp( q );\r\n            }\r\n\r\n            callback = callback || defaultCallback;\r\n\r\n            var op = { fn: function( callback ) { ext.rollback( callback ); }, args: [ onRollback ] }; \r\n            q.push( op );\r\n\r\n            if( q.length == 1 ) {\r\n\r\n                ext.rollback( onRollback );\r\n            }\r\n        }\r\n    }\r\n\r\n    var connection = new Connection();\r\n\r\n    function onOpen( err ) {\r\n\r\n        callback( err, connection );\r\n    }\r\n\r\n    callback = callback || defaultCallback;\r\n\r\n    ext.open(connectionString, onOpen);\r\n\r\n    return connection;\r\n}\r\n\r\nfunction query(connectionString, query, paramsOrCallback, callback) {\r\n\r\n    validateParameters( [ { type: 'string', value: connectionString, name: 'connection string' },\r\n                          { type: 'string', value: query, name: 'query string' }], 'query' );\r\n\r\n    var chunky = getChunkyArgs(paramsOrCallback, callback);\r\n\r\n    return queryRaw(connectionString, query, chunky.params, function (err, results, more) {\r\n        if (chunky.callback) {\r\n            if (err) chunky.callback(err);\r\n            else chunky.callback(err, objectify(results), more);\r\n        }\r\n    });\r\n}\r\n\r\nfunction queryRaw(connectionString, query, paramsOrCallback, callback) {\r\n\r\n    validateParameters( [ { type: 'string', value: connectionString, name: 'connection string' },\r\n                          { type: 'string', value: query, name: 'query string' }], 'queryRaw' );\r\n\r\n    var ext = new sql.Connection();\r\n    var notify = new StreamEvents();\r\n    var q = [];\r\n\r\n    var chunky = getChunkyArgs(paramsOrCallback, callback);\r\n\r\n    chunky.callback = chunky.callback || function( err ) { if( err ) { throw new Error( err ); } };\r\n\r\n    function onOpen( err, connection ) {\r\n\r\n        if( err ) {\r\n            chunky.callback( err );\r\n            return;\r\n        }\r\n\r\n        readall(q, notify, ext, query, chunky.params, function (err, results, more) {\r\n\r\n            if (err) {\r\n                routeStatementError(err, chunky.callback, notify);\r\n                return;\r\n            }\r\n\r\n            if( chunky.callback ) {\r\n                chunky.callback( err, results, more );\r\n            }\r\n\r\n            if( !more ) {\r\n                ext.close();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    ext.open(connectionString, onOpen);\r\n\r\n    return notify;\r\n}\r\n\r\nexports.open = open;\r\nexports.query = query; \r\nexports.queryRaw = queryRaw;\r\n","/home/travis/build/npmtest/node-npmtest-node-sqlserver-unofficial/node_modules/node-sqlserver-unofficial/lib/sqlserver.native.js":"//---------------------------------------------------------------------------------------------------------------------------------\r\n// File: sqlserver.native.js\r\n// Contents: javascript which loads the native part of the Microsoft Driver for Node.js for SQL Server\r\n// \r\n// Copyright Microsoft Corporation and contributors\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n//\r\n// You may obtain a copy of the License at:\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//---------------------------------------------------------------------------------------------------------------------------------\r\n\r\nvar binaryDir= __dirname + '/bin/';\r\n\r\nfiles = require('fs').readdirSync(binaryDir);\r\n\r\nfiles.forEach(function(file){\r\n    if(noBinaryExported())\r\n        attemptToExportBinary(file);\r\n});\r\n\r\nfailIfNoBinaryExported();\r\n\r\n// If the require fails, we can just ignore the exception and continue trying\r\nfunction attemptToExportBinary(filename) {\r\n    try{\r\n        module.exports = require(binaryDir + filename + '/sqlserver.node');\r\n    } catch(e) {\r\n    }\r\n}\r\n\r\nfunction failIfNoBinaryExported() {\r\n    if(noBinaryExported())\r\n\tthrow new Error('None of the binaries loaded succesully. Is your node version either 0.8 or 0.10?');\r\n}\r\n\r\nfunction noBinaryExported() {\r\n    return ! module.exports.hasOwnProperty('Connection');\r\n}\r\n"}